//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.0.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  // Procedures 
  // Chapter: Develop
  // Short Description: Open a new graphics window that preserves the aspect ratio of the given image. 
  public void dev_open_window_fit_image (HObject ho_Image, HTuple hv_Row, HTuple hv_Column, 
      HTuple hv_WidthLimit, HTuple hv_HeightLimit, out HTuple hv_WindowHandle)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_MinWidth = new HTuple(), hv_MaxWidth = new HTuple();
    HTuple hv_MinHeight = new HTuple(), hv_MaxHeight = new HTuple();
    HTuple hv_ResizeFactor = new HTuple(), hv_ImageWidth = new HTuple();
    HTuple hv_ImageHeight = new HTuple(), hv_TempWidth = new HTuple();
    HTuple hv_TempHeight = new HTuple(), hv_WindowWidth = new HTuple();
    HTuple hv_WindowHeight = new HTuple();
    // Initialize local and output iconic variables 
    hv_WindowHandle = new HTuple();
    //This procedure opens a new graphics window and adjusts the size
    //such that it fits into the limits specified by WidthLimit
    //and HeightLimit, but also maintains the correct image aspect ratio.
    //
    //If it is impossible to match the minimum and maximum extent requirements
    //at the same time (f.e. if the image is very long but narrow),
    //the maximum value gets a higher priority,
    //
    //Parse input tuple WidthLimit
    if ((int)((new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(0))).TupleOr(
        new HTuple(hv_WidthLimit.TupleLess(0)))) != 0)
    {
      hv_MinWidth.Dispose();
      hv_MinWidth = 500;
      hv_MaxWidth.Dispose();
      hv_MaxWidth = 800;
    }
    else if ((int)(new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(
        1))) != 0)
    {
      hv_MinWidth.Dispose();
      hv_MinWidth = 0;
      hv_MaxWidth.Dispose();
      hv_MaxWidth = new HTuple(hv_WidthLimit);
    }
    else
    {
      hv_MinWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MinWidth = hv_WidthLimit.TupleSelect(
          0);
      }
      hv_MaxWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MaxWidth = hv_WidthLimit.TupleSelect(
          1);
      }
    }
    //Parse input tuple HeightLimit
    if ((int)((new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(0))).TupleOr(
        new HTuple(hv_HeightLimit.TupleLess(0)))) != 0)
    {
      hv_MinHeight.Dispose();
      hv_MinHeight = 400;
      hv_MaxHeight.Dispose();
      hv_MaxHeight = 600;
    }
    else if ((int)(new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(
        1))) != 0)
    {
      hv_MinHeight.Dispose();
      hv_MinHeight = 0;
      hv_MaxHeight.Dispose();
      hv_MaxHeight = new HTuple(hv_HeightLimit);
    }
    else
    {
      hv_MinHeight.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MinHeight = hv_HeightLimit.TupleSelect(
          0);
      }
      hv_MaxHeight.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_MaxHeight = hv_HeightLimit.TupleSelect(
          1);
      }
    }
    //
    //Test, if window size has to be changed.
    hv_ResizeFactor.Dispose();
    hv_ResizeFactor = 1;
    hv_ImageWidth.Dispose();hv_ImageHeight.Dispose();
    HOperatorSet.GetImageSize(ho_Image, out hv_ImageWidth, out hv_ImageHeight);
    //First, expand window to the minimum extents (if necessary).
    if ((int)((new HTuple(hv_MinWidth.TupleGreater(hv_ImageWidth))).TupleOr(new HTuple(hv_MinHeight.TupleGreater(
        hv_ImageHeight)))) != 0)
    {
      hv_ResizeFactor.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ResizeFactor = (((((hv_MinWidth.TupleReal()
          )/hv_ImageWidth)).TupleConcat((hv_MinHeight.TupleReal())/hv_ImageHeight))).TupleMax()
          ;
      }
    }
    hv_TempWidth.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_TempWidth = hv_ImageWidth*hv_ResizeFactor;
    }
    hv_TempHeight.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_TempHeight = hv_ImageHeight*hv_ResizeFactor;
    }
    //Then, shrink window to maximum extents (if necessary).
    if ((int)((new HTuple(hv_MaxWidth.TupleLess(hv_TempWidth))).TupleOr(new HTuple(hv_MaxHeight.TupleLess(
        hv_TempHeight)))) != 0)
    {
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      {
      HTuple 
        ExpTmpLocalVar_ResizeFactor = hv_ResizeFactor*((((((hv_MaxWidth.TupleReal()
          )/hv_TempWidth)).TupleConcat((hv_MaxHeight.TupleReal())/hv_TempHeight))).TupleMin()
          );
      hv_ResizeFactor.Dispose();
      hv_ResizeFactor = ExpTmpLocalVar_ResizeFactor;
      }
      }
    }
    hv_WindowWidth.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_WindowWidth = hv_ImageWidth*hv_ResizeFactor;
    }
    hv_WindowHeight.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_WindowHeight = hv_ImageHeight*hv_ResizeFactor;
    }
    //Resize window
    //dev_open_window(...);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_ImageHeight-1, hv_ImageWidth-1);
    }

    hv_MinWidth.Dispose();
    hv_MaxWidth.Dispose();
    hv_MinHeight.Dispose();
    hv_MaxHeight.Dispose();
    hv_ResizeFactor.Dispose();
    hv_ImageWidth.Dispose();
    hv_ImageHeight.Dispose();
    hv_TempWidth.Dispose();
    hv_TempHeight.Dispose();
    hv_WindowWidth.Dispose();
    hv_WindowHeight.Dispose();

    return;
  }

  // Local procedures 
  public void active (HTuple hv_p_address)
  {

    HObject ho_Image= new HObject();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    ho_Image.Dispose();
    readImage(out ho_Image, hv_p_address);
    //dealImage (Image)

    getCircle(ho_Image);
    getCenterPoint(ho_Image);


    return;
  }

  public void dealImage (HObject ho_Image)
  {



    // Local iconic variables 

    HObject ho_Regions, ho_ConnectedRegions, ho_SelectedRegions;
    HObject ho_RegionUnion, ho_Rectangle, ho_ImageReduced, ho_Regions1;
    HObject ho_ConnectedRegions1, ho_SelectedRegions1, ho_SortedRegions;
    HObject ho_ObjectSelected, ho_RegionUnion1, ho_Contours;
    HObject ho_Contour, ho_ContCircle, ho_Cross3, ho_ObjectSelected1;
    HObject ho_RegionUnion2, ho_Contours1, ho_Contour1, ho_ContCircle1;
    HObject ho_Cross4, ho_Edges, ho_ContoursSplit, ho_SelectedXLD;
    HObject ho_UnionContours, ho_SelectedXLD1, ho_SortedContours;
    HObject ho_SortedContours3, ho_RegionLines, ho_SelectedXLD2;
    HObject ho_SortedContours1, ho_ObjectSelected2, ho_SortedContours2;
    HObject ho_ObjectSelected3, ho_Cross, ho_Cross1, ho_Cross2;

    // Local control variables 

    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_Phi = new HTuple(), hv_Length1 = new HTuple();
    HTuple hv_Length2 = new HTuple(), hv_Row1 = new HTuple();
    HTuple hv_Column1 = new HTuple(), hv_Radius = new HTuple();
    HTuple hv_MetrologyHandle = new HTuple(), hv_Index1 = new HTuple();
    HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
    HTuple hv_Row3 = new HTuple(), hv_Column3 = new HTuple();
    HTuple hv_Radius1 = new HTuple(), hv_StartPhi = new HTuple();
    HTuple hv_EndPhi = new HTuple(), hv_PointOrder = new HTuple();
    HTuple hv_Row4 = new HTuple(), hv_Column4 = new HTuple();
    HTuple hv_Radius2 = new HTuple(), hv_MetrologyHandle1 = new HTuple();
    HTuple hv_Index2 = new HTuple(), hv_Row5 = new HTuple();
    HTuple hv_Column5 = new HTuple(), hv_Row6 = new HTuple();
    HTuple hv_Column6 = new HTuple(), hv_Radius3 = new HTuple();
    HTuple hv_StartPhi1 = new HTuple(), hv_EndPhi1 = new HTuple();
    HTuple hv_PointOrder1 = new HTuple(), hv_RowBegin = new HTuple();
    HTuple hv_ColBegin = new HTuple(), hv_RowEnd = new HTuple();
    HTuple hv_ColEnd = new HTuple(), hv_Nr = new HTuple();
    HTuple hv_Nc = new HTuple(), hv_Dist = new HTuple(), hv_RowBegin1 = new HTuple();
    HTuple hv_ColBegin1 = new HTuple(), hv_RowEnd1 = new HTuple();
    HTuple hv_ColEnd1 = new HTuple(), hv_Nr1 = new HTuple();
    HTuple hv_Nc1 = new HTuple(), hv_Dist1 = new HTuple();
    HTuple hv_RowProj = new HTuple(), hv_ColProj = new HTuple();
    HTuple hv_RowProj1 = new HTuple(), hv_ColProj1 = new HTuple();
    HTuple hv_CenterRow = new HTuple(), hv_CenterCol = new HTuple();
    HTuple hv_CenterRow1 = new HTuple(), hv_CenterCol1 = new HTuple();
    HTuple hv_IsOverlapping = new HTuple(), hv_IsOverlapping1 = new HTuple();
    HTuple hv_RowCenter = new HTuple(), hv_ColCenter = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionUnion);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Regions1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_SortedRegions);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_RegionUnion1);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    HOperatorSet.GenEmptyObj(out ho_Contour);
    HOperatorSet.GenEmptyObj(out ho_ContCircle);
    HOperatorSet.GenEmptyObj(out ho_Cross3);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected1);
    HOperatorSet.GenEmptyObj(out ho_RegionUnion2);
    HOperatorSet.GenEmptyObj(out ho_Contours1);
    HOperatorSet.GenEmptyObj(out ho_Contour1);
    HOperatorSet.GenEmptyObj(out ho_ContCircle1);
    HOperatorSet.GenEmptyObj(out ho_Cross4);
    HOperatorSet.GenEmptyObj(out ho_Edges);
    HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
    HOperatorSet.GenEmptyObj(out ho_SelectedXLD);
    HOperatorSet.GenEmptyObj(out ho_UnionContours);
    HOperatorSet.GenEmptyObj(out ho_SelectedXLD1);
    HOperatorSet.GenEmptyObj(out ho_SortedContours);
    HOperatorSet.GenEmptyObj(out ho_SortedContours3);
    HOperatorSet.GenEmptyObj(out ho_RegionLines);
    HOperatorSet.GenEmptyObj(out ho_SelectedXLD2);
    HOperatorSet.GenEmptyObj(out ho_SortedContours1);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected2);
    HOperatorSet.GenEmptyObj(out ho_SortedContours2);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected3);
    HOperatorSet.GenEmptyObj(out ho_Cross);
    HOperatorSet.GenEmptyObj(out ho_Cross1);
    HOperatorSet.GenEmptyObj(out ho_Cross2);
    ho_Regions.Dispose();
    HOperatorSet.Threshold(ho_Image, out ho_Regions, 5, 244);
    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);

    ho_SelectedRegions.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
        "and", 35403.7, 43119.6);
    ho_RegionUnion.Dispose();
    HOperatorSet.Union1(ho_SelectedRegions, out ho_RegionUnion);
    hv_Row.Dispose();hv_Column.Dispose();hv_Phi.Dispose();hv_Length1.Dispose();hv_Length2.Dispose();
    HOperatorSet.SmallestRectangle2(ho_RegionUnion, out hv_Row, out hv_Column, out hv_Phi, 
        out hv_Length1, out hv_Length2);
    ho_Rectangle.Dispose();
    HOperatorSet.GenRectangle2(out ho_Rectangle, hv_Row, hv_Column, hv_Phi, hv_Length1, 
        hv_Length2);
    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_ImageReduced);

    //筛选区域里圆
    ho_Regions1.Dispose();
    HOperatorSet.Threshold(ho_ImageReduced, out ho_Regions1, 10, 251);
    ho_ConnectedRegions1.Dispose();
    HOperatorSet.Connection(ho_Regions1, out ho_ConnectedRegions1);
    ho_SelectedRegions1.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions1, "area", 
        "and", 5539.87, 7800.05);
    ho_SortedRegions.Dispose();
    HOperatorSet.SortRegion(ho_SelectedRegions1, out ho_SortedRegions, "upper_left", 
        "true", "column");

    //左圆
    ho_ObjectSelected.Dispose();
    HOperatorSet.SelectObj(ho_SortedRegions, out ho_ObjectSelected, (((new HTuple(1)).TupleConcat(
        2)).TupleConcat(3)).TupleConcat(4));
    ho_RegionUnion1.Dispose();
    HOperatorSet.Union1(ho_ObjectSelected, out ho_RegionUnion1);
    hv_Row1.Dispose();hv_Column1.Dispose();hv_Radius.Dispose();
    HOperatorSet.SmallestCircle(ho_RegionUnion1, out hv_Row1, out hv_Column1, out hv_Radius);

    hv_MetrologyHandle.Dispose();
    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_Index1.Dispose();
            HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_Row1.TupleConcat(
                hv_Column1))).TupleConcat(hv_Radius-31), 12, 5, 1, 30, new HTuple(), new HTuple(), 
        out hv_Index1);
    }
    HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);
    ho_Contours.Dispose();hv_Row2.Dispose();hv_Column2.Dispose();
    HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours, hv_MetrologyHandle, 
        "all", "all", out hv_Row2, out hv_Column2);

    ho_Contour.Dispose();
    HOperatorSet.GenContourPolygonXld(out ho_Contour, hv_Row2, hv_Column2);
    hv_Row3.Dispose();hv_Column3.Dispose();hv_Radius1.Dispose();hv_StartPhi.Dispose();hv_EndPhi.Dispose();hv_PointOrder.Dispose();
    HOperatorSet.FitCircleContourXld(ho_Contour, "algebraic", -1, 0, 0, 3, 2, out hv_Row3, 
        out hv_Column3, out hv_Radius1, out hv_StartPhi, out hv_EndPhi, out hv_PointOrder);
    ho_ContCircle.Dispose();
    HOperatorSet.GenCircleContourXld(out ho_ContCircle, hv_Row3, hv_Column3, hv_Radius1, 
        0, 6.28, "positive", 1);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Cross3.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_Cross3, hv_Row3, hv_Column3, 160, (new HTuple(45)).TupleRad()
        );
    }

    //右圆
    ho_ObjectSelected1.Dispose();
    HOperatorSet.SelectObj(ho_SortedRegions, out ho_ObjectSelected1, (((new HTuple(5)).TupleConcat(
        6)).TupleConcat(7)).TupleConcat(8));
    ho_RegionUnion2.Dispose();
    HOperatorSet.Union1(ho_ObjectSelected1, out ho_RegionUnion2);
    hv_Row4.Dispose();hv_Column4.Dispose();hv_Radius2.Dispose();
    HOperatorSet.SmallestCircle(ho_RegionUnion2, out hv_Row4, out hv_Column4, out hv_Radius2);

    hv_MetrologyHandle1.Dispose();
    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle1);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_Index2.Dispose();
    HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle1, "circle", ((hv_Row4.TupleConcat(
        hv_Column4))).TupleConcat(hv_Radius2-31), 12, 5, 1, 30, new HTuple(), new HTuple(), 
        out hv_Index2);
    }
    HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle1);
    ho_Contours1.Dispose();hv_Row5.Dispose();hv_Column5.Dispose();
    HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours1, hv_MetrologyHandle1, 
        "all", "all", out hv_Row5, out hv_Column5);

    ho_Contour1.Dispose();
    HOperatorSet.GenContourPolygonXld(out ho_Contour1, hv_Row5, hv_Column5);
    hv_Row6.Dispose();hv_Column6.Dispose();hv_Radius3.Dispose();hv_StartPhi1.Dispose();hv_EndPhi1.Dispose();hv_PointOrder1.Dispose();
    HOperatorSet.FitCircleContourXld(ho_Contour1, "algebraic", -1, 0, 0, 3, 2, out hv_Row6, 
        out hv_Column6, out hv_Radius3, out hv_StartPhi1, out hv_EndPhi1, out hv_PointOrder1);
    ho_ContCircle1.Dispose();
    HOperatorSet.GenCircleContourXld(out ho_ContCircle1, hv_Row6, hv_Column6, hv_Radius3, 
        0, 6.28, "positive", 1);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Cross4.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_Cross4, hv_Row6, hv_Column6, 160, (new HTuple(45)).TupleRad()
        );
    }

    //中心点
    ho_Regions1.Dispose();
    HOperatorSet.Threshold(ho_ImageReduced, out ho_Regions1, 36, 190);
    ho_ConnectedRegions1.Dispose();
    HOperatorSet.Connection(ho_Regions1, out ho_ConnectedRegions1);

    ho_SelectedRegions1.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions1, (new HTuple("area")).TupleConcat(
        "outer_radius"), "and", (new HTuple(25830.1)).TupleConcat(376.43), (new HTuple(31641.1)).TupleConcat(
        500));
    ho_Edges.Dispose();
    HOperatorSet.EdgesSubPix(ho_ImageReduced, out ho_Edges, "canny", 1, 20, 40);
    ho_ContoursSplit.Dispose();
    HOperatorSet.SegmentContoursXld(ho_Edges, out ho_ContoursSplit, "lines_circles", 
        5, 4, 2);

    ho_SelectedXLD.Dispose();
    HOperatorSet.SelectShapeXld(ho_ContoursSplit, out ho_SelectedXLD, "contlength", 
        "and", 50.45, 1000);
    ho_UnionContours.Dispose();
    HOperatorSet.UnionCollinearContoursXld(ho_SelectedXLD, out ho_UnionContours, 
        720, 1.5, 2, 0.1, "attr_keep");
    //筛选直线
    ho_SelectedXLD1.Dispose();
    HOperatorSet.SelectShapeXld(ho_UnionContours, out ho_SelectedXLD1, (new HTuple("contlength")).TupleConcat(
        "circularity"), "and", (new HTuple(1465.06)).TupleConcat(0), (new HTuple(1731.89)).TupleConcat(
        0.05051));
    ho_SortedContours.Dispose();
    HOperatorSet.SortContoursXld(ho_SelectedXLD1, out ho_SortedContours, "upper_left", 
        "true", "row");
    ho_SortedContours3.Dispose();
    HOperatorSet.SortContoursXld(ho_SelectedXLD1, out ho_SortedContours3, "lower_left", 
        "false", "row");

    //上下边缘
    ho_ObjectSelected.Dispose();
    HOperatorSet.SelectObj(ho_SortedContours, out ho_ObjectSelected, 1);
    hv_RowBegin.Dispose();hv_ColBegin.Dispose();hv_RowEnd.Dispose();hv_ColEnd.Dispose();hv_Nr.Dispose();hv_Nc.Dispose();hv_Dist.Dispose();
    HOperatorSet.FitLineContourXld(ho_ObjectSelected, "tukey", -1, 0, 5, 2, out hv_RowBegin, 
        out hv_ColBegin, out hv_RowEnd, out hv_ColEnd, out hv_Nr, out hv_Nc, out hv_Dist);

    ho_ObjectSelected1.Dispose();
    HOperatorSet.SelectObj(ho_SortedContours3, out ho_ObjectSelected1, 1);
    hv_RowBegin1.Dispose();hv_ColBegin1.Dispose();hv_RowEnd1.Dispose();hv_ColEnd1.Dispose();hv_Nr1.Dispose();hv_Nc1.Dispose();hv_Dist1.Dispose();
    HOperatorSet.FitLineContourXld(ho_ObjectSelected1, "tukey", -1, 0, 5, 2, out hv_RowBegin1, 
        out hv_ColBegin1, out hv_RowEnd1, out hv_ColEnd1, out hv_Nr1, out hv_Nc1, 
        out hv_Dist1);

    hv_RowProj.Dispose();hv_ColProj.Dispose();
    HOperatorSet.ProjectionPl(hv_RowBegin, hv_ColBegin, hv_RowBegin1, hv_ColBegin1, 
        hv_RowEnd1, hv_ColEnd1, out hv_RowProj, out hv_ColProj);
    hv_RowProj1.Dispose();hv_ColProj1.Dispose();
    HOperatorSet.ProjectionPl(hv_RowEnd, hv_ColEnd, hv_RowBegin1, hv_ColBegin1, hv_RowEnd1, 
        hv_ColEnd1, out hv_RowProj1, out hv_ColProj1);

    hv_CenterRow.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_CenterRow = (hv_RowBegin+hv_RowProj)/2;
    }
    hv_CenterCol.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_CenterCol = (hv_ColBegin+hv_ColProj)/2;
    }
    hv_CenterRow1.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_CenterRow1 = (hv_RowEnd+hv_RowProj1)/2;
    }
    hv_CenterCol1.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_CenterCol1 = (hv_ColEnd+hv_ColProj1)/2;
    }
    ho_RegionLines.Dispose();
    HOperatorSet.GenRegionLine(out ho_RegionLines, hv_CenterRow, hv_CenterCol, hv_CenterRow1, 
        hv_CenterCol1);

    //筛选圆弧
    ho_SelectedXLD2.Dispose();
    HOperatorSet.SelectShapeXld(ho_SelectedXLD, out ho_SelectedXLD2, (new HTuple("contlength")).TupleConcat(
        "circularity"), "and", (new HTuple(178.53)).TupleConcat(0.10976), (new HTuple(1000)).TupleConcat(
        0.41709));

    //左圆弧
    ho_SortedContours1.Dispose();
    HOperatorSet.SortContoursXld(ho_SelectedXLD2, out ho_SortedContours1, "upper_left", 
        "true", "column");
    ho_ObjectSelected2.Dispose();
    HOperatorSet.SelectObj(ho_SortedContours1, out ho_ObjectSelected2, 1);

    //右圆弧
    ho_SortedContours2.Dispose();
    HOperatorSet.SortContoursXld(ho_SelectedXLD2, out ho_SortedContours2, "upper_right", 
        "false", "column");
    ho_ObjectSelected3.Dispose();
    HOperatorSet.SelectObj(ho_SortedContours2, out ho_ObjectSelected3, 1);
    //交点
    hv_Row1.Dispose();hv_Column1.Dispose();hv_IsOverlapping.Dispose();
    HOperatorSet.IntersectionLineContourXld(ho_ObjectSelected2, hv_CenterRow, hv_CenterCol, 
        hv_CenterRow1, hv_CenterCol1, out hv_Row1, out hv_Column1, out hv_IsOverlapping);
    hv_Row2.Dispose();hv_Column2.Dispose();hv_IsOverlapping1.Dispose();
    HOperatorSet.IntersectionLineContourXld(ho_ObjectSelected3, hv_CenterRow, hv_CenterCol, 
        hv_CenterRow1, hv_CenterCol1, out hv_Row2, out hv_Column2, out hv_IsOverlapping1);

    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Cross.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_Cross, hv_Row1, hv_Column1, 166, (new HTuple(45)).TupleRad()
        );
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Cross1.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_Cross1, hv_Row2, hv_Column2, 166, (new HTuple(45)).TupleRad()
        );
    }
    hv_RowCenter.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_RowCenter = (hv_Row1+hv_Row2)/2;
    }
    hv_ColCenter.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_ColCenter = (hv_Column1+hv_Column2)/2;
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Cross2.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_RowCenter, hv_ColCenter, 166, 
        (new HTuple(45)).TupleRad());
    }
    HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);

    HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 1);
    HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");

    HOperatorSet.SetColored(hv_ExpDefaultWinHandle, 12);
    HOperatorSet.DispObj(ho_Cross2, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_ObjectSelected2, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_ObjectSelected3, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_ObjectSelected, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_ObjectSelected1, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_RegionLines, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_Cross3, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_Cross4, hv_ExpDefaultWinHandle);

    HOperatorSet.DispObj(ho_Contours1, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_ContCircle1, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_Contours, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_ContCircle, hv_ExpDefaultWinHandle);
    ho_Regions.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions.Dispose();
    ho_RegionUnion.Dispose();
    ho_Rectangle.Dispose();
    ho_ImageReduced.Dispose();
    ho_Regions1.Dispose();
    ho_ConnectedRegions1.Dispose();
    ho_SelectedRegions1.Dispose();
    ho_SortedRegions.Dispose();
    ho_ObjectSelected.Dispose();
    ho_RegionUnion1.Dispose();
    ho_Contours.Dispose();
    ho_Contour.Dispose();
    ho_ContCircle.Dispose();
    ho_Cross3.Dispose();
    ho_ObjectSelected1.Dispose();
    ho_RegionUnion2.Dispose();
    ho_Contours1.Dispose();
    ho_Contour1.Dispose();
    ho_ContCircle1.Dispose();
    ho_Cross4.Dispose();
    ho_Edges.Dispose();
    ho_ContoursSplit.Dispose();
    ho_SelectedXLD.Dispose();
    ho_UnionContours.Dispose();
    ho_SelectedXLD1.Dispose();
    ho_SortedContours.Dispose();
    ho_SortedContours3.Dispose();
    ho_RegionLines.Dispose();
    ho_SelectedXLD2.Dispose();
    ho_SortedContours1.Dispose();
    ho_ObjectSelected2.Dispose();
    ho_SortedContours2.Dispose();
    ho_ObjectSelected3.Dispose();
    ho_Cross.Dispose();
    ho_Cross1.Dispose();
    ho_Cross2.Dispose();

    hv_Row.Dispose();
    hv_Column.Dispose();
    hv_Phi.Dispose();
    hv_Length1.Dispose();
    hv_Length2.Dispose();
    hv_Row1.Dispose();
    hv_Column1.Dispose();
    hv_Radius.Dispose();
    hv_MetrologyHandle.Dispose();
    hv_Index1.Dispose();
    hv_Row2.Dispose();
    hv_Column2.Dispose();
    hv_Row3.Dispose();
    hv_Column3.Dispose();
    hv_Radius1.Dispose();
    hv_StartPhi.Dispose();
    hv_EndPhi.Dispose();
    hv_PointOrder.Dispose();
    hv_Row4.Dispose();
    hv_Column4.Dispose();
    hv_Radius2.Dispose();
    hv_MetrologyHandle1.Dispose();
    hv_Index2.Dispose();
    hv_Row5.Dispose();
    hv_Column5.Dispose();
    hv_Row6.Dispose();
    hv_Column6.Dispose();
    hv_Radius3.Dispose();
    hv_StartPhi1.Dispose();
    hv_EndPhi1.Dispose();
    hv_PointOrder1.Dispose();
    hv_RowBegin.Dispose();
    hv_ColBegin.Dispose();
    hv_RowEnd.Dispose();
    hv_ColEnd.Dispose();
    hv_Nr.Dispose();
    hv_Nc.Dispose();
    hv_Dist.Dispose();
    hv_RowBegin1.Dispose();
    hv_ColBegin1.Dispose();
    hv_RowEnd1.Dispose();
    hv_ColEnd1.Dispose();
    hv_Nr1.Dispose();
    hv_Nc1.Dispose();
    hv_Dist1.Dispose();
    hv_RowProj.Dispose();
    hv_ColProj.Dispose();
    hv_RowProj1.Dispose();
    hv_ColProj1.Dispose();
    hv_CenterRow.Dispose();
    hv_CenterCol.Dispose();
    hv_CenterRow1.Dispose();
    hv_CenterCol1.Dispose();
    hv_IsOverlapping.Dispose();
    hv_IsOverlapping1.Dispose();
    hv_RowCenter.Dispose();
    hv_ColCenter.Dispose();

    return;
  }

  public void getCenterPoint (HObject ho_Image)
  {



    // Local iconic variables 

    HObject ho_ImageReduced, ho_Regions1, ho_ConnectedRegions1;
    HObject ho_SelectedRegions1, ho_Edges, ho_ContoursSplit;
    HObject ho_SelectedXLD, ho_UnionContours, ho_SelectedXLD1;
    HObject ho_SortedContours, ho_SortedContours3, ho_ObjectSelected;
    HObject ho_ObjectSelected1, ho_RegionLines, ho_SelectedXLD2;
    HObject ho_SortedContours1, ho_ObjectSelected2, ho_SortedContours2;
    HObject ho_ObjectSelected3, ho_Cross, ho_Cross1, ho_Cross2;

    // Local control variables 

    HTuple hv_RowBegin = new HTuple(), hv_ColBegin = new HTuple();
    HTuple hv_RowEnd = new HTuple(), hv_ColEnd = new HTuple();
    HTuple hv_Nr = new HTuple(), hv_Nc = new HTuple(), hv_Dist = new HTuple();
    HTuple hv_RowBegin1 = new HTuple(), hv_ColBegin1 = new HTuple();
    HTuple hv_RowEnd1 = new HTuple(), hv_ColEnd1 = new HTuple();
    HTuple hv_Nr1 = new HTuple(), hv_Nc1 = new HTuple(), hv_Dist1 = new HTuple();
    HTuple hv_RowProj = new HTuple(), hv_ColProj = new HTuple();
    HTuple hv_RowProj1 = new HTuple(), hv_ColProj1 = new HTuple();
    HTuple hv_CenterRow = new HTuple(), hv_CenterCol = new HTuple();
    HTuple hv_CenterRow1 = new HTuple(), hv_CenterCol1 = new HTuple();
    HTuple hv_Row1 = new HTuple(), hv_Column1 = new HTuple();
    HTuple hv_IsOverlapping = new HTuple(), hv_Row2 = new HTuple();
    HTuple hv_Column2 = new HTuple(), hv_IsOverlapping1 = new HTuple();
    HTuple hv_RowCenter = new HTuple(), hv_ColCenter = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Regions1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_Edges);
    HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
    HOperatorSet.GenEmptyObj(out ho_SelectedXLD);
    HOperatorSet.GenEmptyObj(out ho_UnionContours);
    HOperatorSet.GenEmptyObj(out ho_SelectedXLD1);
    HOperatorSet.GenEmptyObj(out ho_SortedContours);
    HOperatorSet.GenEmptyObj(out ho_SortedContours3);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected1);
    HOperatorSet.GenEmptyObj(out ho_RegionLines);
    HOperatorSet.GenEmptyObj(out ho_SelectedXLD2);
    HOperatorSet.GenEmptyObj(out ho_SortedContours1);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected2);
    HOperatorSet.GenEmptyObj(out ho_SortedContours2);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected3);
    HOperatorSet.GenEmptyObj(out ho_Cross);
    HOperatorSet.GenEmptyObj(out ho_Cross1);
    HOperatorSet.GenEmptyObj(out ho_Cross2);
    //中心点
    ho_ImageReduced.Dispose();
    getReducedImage(ho_Image, out ho_ImageReduced);
    ho_Regions1.Dispose();
    HOperatorSet.Threshold(ho_ImageReduced, out ho_Regions1, 36, 190);
    ho_ConnectedRegions1.Dispose();
    HOperatorSet.Connection(ho_Regions1, out ho_ConnectedRegions1);

    ho_SelectedRegions1.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions1, (new HTuple("area")).TupleConcat(
        "outer_radius"), "and", (new HTuple(25830.1)).TupleConcat(376.43), (new HTuple(31641.1)).TupleConcat(
        500));
    ho_Edges.Dispose();
    HOperatorSet.EdgesSubPix(ho_ImageReduced, out ho_Edges, "canny", 1, 20, 40);
    ho_ContoursSplit.Dispose();
    HOperatorSet.SegmentContoursXld(ho_Edges, out ho_ContoursSplit, "lines_circles", 
        5, 4, 2);

    ho_SelectedXLD.Dispose();
    HOperatorSet.SelectShapeXld(ho_ContoursSplit, out ho_SelectedXLD, "contlength", 
        "and", 50.45, 1000);
    ho_UnionContours.Dispose();
    HOperatorSet.UnionCollinearContoursXld(ho_SelectedXLD, out ho_UnionContours, 
        720, 1.5, 2, 0.1, "attr_keep");
    //筛选直线
    ho_SelectedXLD1.Dispose();
    HOperatorSet.SelectShapeXld(ho_UnionContours, out ho_SelectedXLD1, (new HTuple("contlength")).TupleConcat(
        "circularity"), "and", (new HTuple(1465.06)).TupleConcat(0), (new HTuple(1731.89)).TupleConcat(
        0.05051));
    ho_SortedContours.Dispose();
    HOperatorSet.SortContoursXld(ho_SelectedXLD1, out ho_SortedContours, "upper_left", 
        "true", "row");
    ho_SortedContours3.Dispose();
    HOperatorSet.SortContoursXld(ho_SelectedXLD1, out ho_SortedContours3, "lower_left", 
        "false", "row");

    //上下边缘
    ho_ObjectSelected.Dispose();
    HOperatorSet.SelectObj(ho_SortedContours, out ho_ObjectSelected, 1);
    hv_RowBegin.Dispose();hv_ColBegin.Dispose();hv_RowEnd.Dispose();hv_ColEnd.Dispose();hv_Nr.Dispose();hv_Nc.Dispose();hv_Dist.Dispose();
    HOperatorSet.FitLineContourXld(ho_ObjectSelected, "tukey", -1, 0, 5, 2, out hv_RowBegin, 
        out hv_ColBegin, out hv_RowEnd, out hv_ColEnd, out hv_Nr, out hv_Nc, out hv_Dist);

    ho_ObjectSelected1.Dispose();
    HOperatorSet.SelectObj(ho_SortedContours3, out ho_ObjectSelected1, 1);
    hv_RowBegin1.Dispose();hv_ColBegin1.Dispose();hv_RowEnd1.Dispose();hv_ColEnd1.Dispose();hv_Nr1.Dispose();hv_Nc1.Dispose();hv_Dist1.Dispose();
    HOperatorSet.FitLineContourXld(ho_ObjectSelected1, "tukey", -1, 0, 5, 2, out hv_RowBegin1, 
        out hv_ColBegin1, out hv_RowEnd1, out hv_ColEnd1, out hv_Nr1, out hv_Nc1, 
        out hv_Dist1);

    hv_RowProj.Dispose();hv_ColProj.Dispose();
    HOperatorSet.ProjectionPl(hv_RowBegin, hv_ColBegin, hv_RowBegin1, hv_ColBegin1, 
        hv_RowEnd1, hv_ColEnd1, out hv_RowProj, out hv_ColProj);
    hv_RowProj1.Dispose();hv_ColProj1.Dispose();
    HOperatorSet.ProjectionPl(hv_RowEnd, hv_ColEnd, hv_RowBegin1, hv_ColBegin1, hv_RowEnd1, 
        hv_ColEnd1, out hv_RowProj1, out hv_ColProj1);

    hv_CenterRow.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_CenterRow = (hv_RowBegin+hv_RowProj)/2;
    }
    hv_CenterCol.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_CenterCol = (hv_ColBegin+hv_ColProj)/2;
    }
    hv_CenterRow1.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_CenterRow1 = (hv_RowEnd+hv_RowProj1)/2;
    }
    hv_CenterCol1.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_CenterCol1 = (hv_ColEnd+hv_ColProj1)/2;
    }
    ho_RegionLines.Dispose();
    HOperatorSet.GenRegionLine(out ho_RegionLines, hv_CenterRow, hv_CenterCol, hv_CenterRow1, 
        hv_CenterCol1);

    //筛选圆弧
    ho_SelectedXLD2.Dispose();
    HOperatorSet.SelectShapeXld(ho_SelectedXLD, out ho_SelectedXLD2, (new HTuple("contlength")).TupleConcat(
        "circularity"), "and", (new HTuple(178.53)).TupleConcat(0.10976), (new HTuple(1000)).TupleConcat(
        0.41709));

    //左圆弧
    ho_SortedContours1.Dispose();
    HOperatorSet.SortContoursXld(ho_SelectedXLD2, out ho_SortedContours1, "upper_left", 
        "true", "column");
    ho_ObjectSelected2.Dispose();
    HOperatorSet.SelectObj(ho_SortedContours1, out ho_ObjectSelected2, 1);

    //右圆弧
    ho_SortedContours2.Dispose();
    HOperatorSet.SortContoursXld(ho_SelectedXLD2, out ho_SortedContours2, "upper_right", 
        "false", "column");
    ho_ObjectSelected3.Dispose();
    HOperatorSet.SelectObj(ho_SortedContours2, out ho_ObjectSelected3, 1);
    //交点
    hv_Row1.Dispose();hv_Column1.Dispose();hv_IsOverlapping.Dispose();
    HOperatorSet.IntersectionLineContourXld(ho_ObjectSelected2, hv_CenterRow, hv_CenterCol, 
        hv_CenterRow1, hv_CenterCol1, out hv_Row1, out hv_Column1, out hv_IsOverlapping);
    hv_Row2.Dispose();hv_Column2.Dispose();hv_IsOverlapping1.Dispose();
    HOperatorSet.IntersectionLineContourXld(ho_ObjectSelected3, hv_CenterRow, hv_CenterCol, 
        hv_CenterRow1, hv_CenterCol1, out hv_Row2, out hv_Column2, out hv_IsOverlapping1);

    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Cross.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_Cross, hv_Row1, hv_Column1, 166, (new HTuple(45)).TupleRad()
        );
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Cross1.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_Cross1, hv_Row2, hv_Column2, 166, (new HTuple(45)).TupleRad()
        );
    }
    hv_RowCenter.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_RowCenter = (hv_Row1+hv_Row2)/2;
    }
    hv_ColCenter.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_ColCenter = (hv_Column1+hv_Column2)/2;
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Cross2.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_RowCenter, hv_ColCenter, 166, 
        (new HTuple(45)).TupleRad());
    }
    HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 1);
    HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");

    HOperatorSet.SetColored(hv_ExpDefaultWinHandle, 12);
    HOperatorSet.DispObj(ho_Cross2, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_ObjectSelected2, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_ObjectSelected3, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_ObjectSelected, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_ObjectSelected1, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_RegionLines, hv_ExpDefaultWinHandle);
    ho_ImageReduced.Dispose();
    ho_Regions1.Dispose();
    ho_ConnectedRegions1.Dispose();
    ho_SelectedRegions1.Dispose();
    ho_Edges.Dispose();
    ho_ContoursSplit.Dispose();
    ho_SelectedXLD.Dispose();
    ho_UnionContours.Dispose();
    ho_SelectedXLD1.Dispose();
    ho_SortedContours.Dispose();
    ho_SortedContours3.Dispose();
    ho_ObjectSelected.Dispose();
    ho_ObjectSelected1.Dispose();
    ho_RegionLines.Dispose();
    ho_SelectedXLD2.Dispose();
    ho_SortedContours1.Dispose();
    ho_ObjectSelected2.Dispose();
    ho_SortedContours2.Dispose();
    ho_ObjectSelected3.Dispose();
    ho_Cross.Dispose();
    ho_Cross1.Dispose();
    ho_Cross2.Dispose();

    hv_RowBegin.Dispose();
    hv_ColBegin.Dispose();
    hv_RowEnd.Dispose();
    hv_ColEnd.Dispose();
    hv_Nr.Dispose();
    hv_Nc.Dispose();
    hv_Dist.Dispose();
    hv_RowBegin1.Dispose();
    hv_ColBegin1.Dispose();
    hv_RowEnd1.Dispose();
    hv_ColEnd1.Dispose();
    hv_Nr1.Dispose();
    hv_Nc1.Dispose();
    hv_Dist1.Dispose();
    hv_RowProj.Dispose();
    hv_ColProj.Dispose();
    hv_RowProj1.Dispose();
    hv_ColProj1.Dispose();
    hv_CenterRow.Dispose();
    hv_CenterCol.Dispose();
    hv_CenterRow1.Dispose();
    hv_CenterCol1.Dispose();
    hv_Row1.Dispose();
    hv_Column1.Dispose();
    hv_IsOverlapping.Dispose();
    hv_Row2.Dispose();
    hv_Column2.Dispose();
    hv_IsOverlapping1.Dispose();
    hv_RowCenter.Dispose();
    hv_ColCenter.Dispose();

    return;
  }

  public void getCircle (HObject ho_Image)
  {



    // Local iconic variables 

    HObject ho_ImageReduced, ho_Regions1, ho_ConnectedRegions1;
    HObject ho_SelectedRegions1, ho_SortedRegions, ho_ObjectSelected;
    HObject ho_RegionUnion1, ho_Contours, ho_Contour, ho_ContCircle;
    HObject ho_Cross3, ho_ObjectSelected1, ho_RegionUnion2;
    HObject ho_Contours1, ho_Contour1, ho_ContCircle1, ho_Cross4;

    // Local control variables 

    HTuple hv_Row1 = new HTuple(), hv_Column1 = new HTuple();
    HTuple hv_Radius = new HTuple(), hv_MetrologyHandle = new HTuple();
    HTuple hv_Index1 = new HTuple(), hv_Row2 = new HTuple();
    HTuple hv_Column2 = new HTuple(), hv_Row3 = new HTuple();
    HTuple hv_Column3 = new HTuple(), hv_Radius1 = new HTuple();
    HTuple hv_StartPhi = new HTuple(), hv_EndPhi = new HTuple();
    HTuple hv_PointOrder = new HTuple(), hv_Row4 = new HTuple();
    HTuple hv_Column4 = new HTuple(), hv_Radius2 = new HTuple();
    HTuple hv_MetrologyHandle1 = new HTuple(), hv_Index2 = new HTuple();
    HTuple hv_Row5 = new HTuple(), hv_Column5 = new HTuple();
    HTuple hv_Row6 = new HTuple(), hv_Column6 = new HTuple();
    HTuple hv_Radius3 = new HTuple(), hv_StartPhi1 = new HTuple();
    HTuple hv_EndPhi1 = new HTuple(), hv_PointOrder1 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Regions1);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_SortedRegions);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_RegionUnion1);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    HOperatorSet.GenEmptyObj(out ho_Contour);
    HOperatorSet.GenEmptyObj(out ho_ContCircle);
    HOperatorSet.GenEmptyObj(out ho_Cross3);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected1);
    HOperatorSet.GenEmptyObj(out ho_RegionUnion2);
    HOperatorSet.GenEmptyObj(out ho_Contours1);
    HOperatorSet.GenEmptyObj(out ho_Contour1);
    HOperatorSet.GenEmptyObj(out ho_ContCircle1);
    HOperatorSet.GenEmptyObj(out ho_Cross4);
    ho_ImageReduced.Dispose();
    getReducedImage(ho_Image, out ho_ImageReduced);

    //筛选区域里圆
    ho_Regions1.Dispose();
    HOperatorSet.Threshold(ho_ImageReduced, out ho_Regions1, 10, 251);
    ho_ConnectedRegions1.Dispose();
    HOperatorSet.Connection(ho_Regions1, out ho_ConnectedRegions1);
    ho_SelectedRegions1.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions1, "area", 
        "and", 5539.87, 7800.05);
    ho_SortedRegions.Dispose();
    HOperatorSet.SortRegion(ho_SelectedRegions1, out ho_SortedRegions, "upper_left", 
        "true", "column");

    //左圆
    ho_ObjectSelected.Dispose();
    HOperatorSet.SelectObj(ho_SortedRegions, out ho_ObjectSelected, (((new HTuple(1)).TupleConcat(
        2)).TupleConcat(3)).TupleConcat(4));
    ho_RegionUnion1.Dispose();
    HOperatorSet.Union1(ho_ObjectSelected, out ho_RegionUnion1);
    hv_Row1.Dispose();hv_Column1.Dispose();hv_Radius.Dispose();
    HOperatorSet.SmallestCircle(ho_RegionUnion1, out hv_Row1, out hv_Column1, out hv_Radius);

    hv_MetrologyHandle.Dispose();
    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_Index1.Dispose();
    HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_Row1.TupleConcat(
        hv_Column1))).TupleConcat(hv_Radius-31), 12, 5, 1, 30, new HTuple(), new HTuple(), 
        out hv_Index1);
    }
    HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);
    ho_Contours.Dispose();hv_Row2.Dispose();hv_Column2.Dispose();
    HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours, hv_MetrologyHandle, 
        "all", "all", out hv_Row2, out hv_Column2);

    ho_Contour.Dispose();
    HOperatorSet.GenContourPolygonXld(out ho_Contour, hv_Row2, hv_Column2);
    hv_Row3.Dispose();hv_Column3.Dispose();hv_Radius1.Dispose();hv_StartPhi.Dispose();hv_EndPhi.Dispose();hv_PointOrder.Dispose();
    HOperatorSet.FitCircleContourXld(ho_Contour, "algebraic", -1, 0, 0, 3, 2, out hv_Row3, 
        out hv_Column3, out hv_Radius1, out hv_StartPhi, out hv_EndPhi, out hv_PointOrder);
    ho_ContCircle.Dispose();
    HOperatorSet.GenCircleContourXld(out ho_ContCircle, hv_Row3, hv_Column3, hv_Radius1, 
        0, 6.28, "positive", 1);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Cross3.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_Cross3, hv_Row3, hv_Column3, 160, (new HTuple(45)).TupleRad()
        );
    }

    //右圆
    ho_ObjectSelected1.Dispose();
    HOperatorSet.SelectObj(ho_SortedRegions, out ho_ObjectSelected1, (((new HTuple(5)).TupleConcat(
        6)).TupleConcat(7)).TupleConcat(8));
    ho_RegionUnion2.Dispose();
    HOperatorSet.Union1(ho_ObjectSelected1, out ho_RegionUnion2);
    hv_Row4.Dispose();hv_Column4.Dispose();hv_Radius2.Dispose();
    HOperatorSet.SmallestCircle(ho_RegionUnion2, out hv_Row4, out hv_Column4, out hv_Radius2);

    hv_MetrologyHandle1.Dispose();
    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle1);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_Index2.Dispose();
    HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle1, "circle", ((hv_Row4.TupleConcat(
        hv_Column4))).TupleConcat(hv_Radius2-31), 12, 5, 1, 30, new HTuple(), new HTuple(), 
        out hv_Index2);
    }
    HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle1);
    ho_Contours1.Dispose();hv_Row5.Dispose();hv_Column5.Dispose();
    HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours1, hv_MetrologyHandle1, 
        "all", "all", out hv_Row5, out hv_Column5);

    ho_Contour1.Dispose();
    HOperatorSet.GenContourPolygonXld(out ho_Contour1, hv_Row5, hv_Column5);
    hv_Row6.Dispose();hv_Column6.Dispose();hv_Radius3.Dispose();hv_StartPhi1.Dispose();hv_EndPhi1.Dispose();hv_PointOrder1.Dispose();
    HOperatorSet.FitCircleContourXld(ho_Contour1, "algebraic", -1, 0, 0, 3, 2, out hv_Row6, 
        out hv_Column6, out hv_Radius3, out hv_StartPhi1, out hv_EndPhi1, out hv_PointOrder1);
    ho_ContCircle1.Dispose();
    HOperatorSet.GenCircleContourXld(out ho_ContCircle1, hv_Row6, hv_Column6, hv_Radius3, 
        0, 6.28, "positive", 1);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Cross4.Dispose();
    HOperatorSet.GenCrossContourXld(out ho_Cross4, hv_Row6, hv_Column6, 160, (new HTuple(45)).TupleRad()
        );
    }
    HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 1);

    HOperatorSet.SetColored(hv_ExpDefaultWinHandle, 12);
    HOperatorSet.DispObj(ho_Contours1, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_ContCircle1, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_Contours, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_ContCircle, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_Cross3, hv_ExpDefaultWinHandle);
    HOperatorSet.DispObj(ho_Cross4, hv_ExpDefaultWinHandle);
    ho_ImageReduced.Dispose();
    ho_Regions1.Dispose();
    ho_ConnectedRegions1.Dispose();
    ho_SelectedRegions1.Dispose();
    ho_SortedRegions.Dispose();
    ho_ObjectSelected.Dispose();
    ho_RegionUnion1.Dispose();
    ho_Contours.Dispose();
    ho_Contour.Dispose();
    ho_ContCircle.Dispose();
    ho_Cross3.Dispose();
    ho_ObjectSelected1.Dispose();
    ho_RegionUnion2.Dispose();
    ho_Contours1.Dispose();
    ho_Contour1.Dispose();
    ho_ContCircle1.Dispose();
    ho_Cross4.Dispose();

    hv_Row1.Dispose();
    hv_Column1.Dispose();
    hv_Radius.Dispose();
    hv_MetrologyHandle.Dispose();
    hv_Index1.Dispose();
    hv_Row2.Dispose();
    hv_Column2.Dispose();
    hv_Row3.Dispose();
    hv_Column3.Dispose();
    hv_Radius1.Dispose();
    hv_StartPhi.Dispose();
    hv_EndPhi.Dispose();
    hv_PointOrder.Dispose();
    hv_Row4.Dispose();
    hv_Column4.Dispose();
    hv_Radius2.Dispose();
    hv_MetrologyHandle1.Dispose();
    hv_Index2.Dispose();
    hv_Row5.Dispose();
    hv_Column5.Dispose();
    hv_Row6.Dispose();
    hv_Column6.Dispose();
    hv_Radius3.Dispose();
    hv_StartPhi1.Dispose();
    hv_EndPhi1.Dispose();
    hv_PointOrder1.Dispose();

    return;
  }

  public void getReducedImage (HObject ho_Image, out HObject ho_ImageReduced)
  {



    // Local iconic variables 

    HObject ho_Regions, ho_ConnectedRegions, ho_SelectedRegions;
    HObject ho_RegionUnion, ho_Rectangle;

    // Local control variables 

    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_Phi = new HTuple(), hv_Length1 = new HTuple();
    HTuple hv_Length2 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionUnion);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    ho_Regions.Dispose();
    HOperatorSet.Threshold(ho_Image, out ho_Regions, 5, 244);
    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);

    ho_SelectedRegions.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
        "and", 35403.7, 43119.6);
    ho_RegionUnion.Dispose();
    HOperatorSet.Union1(ho_SelectedRegions, out ho_RegionUnion);
    hv_Row.Dispose();hv_Column.Dispose();hv_Phi.Dispose();hv_Length1.Dispose();hv_Length2.Dispose();
    HOperatorSet.SmallestRectangle2(ho_RegionUnion, out hv_Row, out hv_Column, out hv_Phi, 
        out hv_Length1, out hv_Length2);
    ho_Rectangle.Dispose();
    HOperatorSet.GenRectangle2(out ho_Rectangle, hv_Row, hv_Column, hv_Phi, hv_Length1, 
        hv_Length2);
    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_ImageReduced);
    ho_Regions.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions.Dispose();
    ho_RegionUnion.Dispose();
    ho_Rectangle.Dispose();

    hv_Row.Dispose();
    hv_Column.Dispose();
    hv_Phi.Dispose();
    hv_Length1.Dispose();
    hv_Length2.Dispose();

    return;
  }

  public void readImage (out HObject ho_Image, HTuple hv_p_address)
  {



    // Local control variables 

    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_WindowID = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    //dev_close_window(...);
    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, hv_p_address);
    hv_Width.Dispose();hv_Height.Dispose();
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_WindowID.Dispose();
    dev_open_window_fit_image(ho_Image, 0, 0, hv_Width/10, hv_Height/10, out hv_WindowID);
    }
    HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);

    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_WindowID.Dispose();

    return;
  }

  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    //Image Acquisition 01: Code generated by Image Acquisition 01
    // dev_update_window(...); only in hdevelop
    ho_Image.Dispose();
    active( "E:/image/算法/新建文件夹/0.bmp.tif");
    //readImage (Image, 'E:/image/算法/新建文件夹/0.bmp.tif')
    //dealImage (Image)

    //getCircle (Image)
    //getCenterPoint (Image)


    // dev_update_window(...); only in hdevelop
    HOperatorSet.ClearWindow(hv_ExpDefaultWinHandle);
    ho_Image.Dispose();


  }

  public void InitHalcon()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }
    public void InitHalcon(HTuple Window)
    {
        hv_ExpDefaultWinHandle = Window;
        // Default settings used in HDevelop
        HOperatorSet.SetSystem("width", 512);
        HOperatorSet.SetSystem("height", 512);
    }

    public void RunHalcon(HTuple Window)
  {
    hv_ExpDefaultWinHandle = Window;
    action();
  }

}

